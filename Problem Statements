Interface for Sorting Algorithm
Define a generic interface for a sorting algorithm. Then implement the heap-sort algorithm and another in-place sorting algorithm of your choice as specific instances of that interface. Design and implement a priority-queue data structure based on the sorting interface above. Design a test to compare the performance of the priority-queue for the two sorting algorithms you have implemented.

The Social Network
In this problem, you will work with a social network. In this case, a "social network" consists of a set of individuals, and for each individual, a list of his contacts. (The contact relationship is not necessarily symmetric: A may be a contact of B, but B may not be a contact of A.) Let's define C to be an extended contact of A if C is a direct contact of A, or C can be reached by following the contact chains starting with A. Choose one or more appropriate data structures to model a social network like this. Devise an efficient algorithm that takes a social network as input and computes, for each individual in the network, his/her extended contact list.

It's time! (Front-end Challenge)
Design a clock web app. It should display the time using an analog display (with hour, minute and second hands). It should allow the user to select the time zone using a drop-down menu (or any other mechanism of your choice), and display the time correctly in that time zone.

Tree Structured Data Set (Front-end)
Build a web app that can display tree structured data sets. Each node in the tree has a weight/value associated with it. You should build a tree data structure out of the nodes (e.g., a binary search tree, or a binary heap) and display the tree graphically in a browser. Each node in the display should be expandable/collapsible by clicking on it.
